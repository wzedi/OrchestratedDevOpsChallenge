{
    "AWSTemplateFormatVersion" : "2010-09-09",

        "Description" : "AWS CloudFormation Template for Training Environment: creates a VPC and adds an EC2 instance with an Elastic IP address and a security group.",

        "Parameters" : {

            "InstanceType" : {
                "Description" : "WebServer EC2 instance type",
                "Type" : "String",
                "Default" : "t2.small",
                "AllowedValues" : [ "t1.micro", "t2.nano", "t2.micro", "t2.small", "t2.medium", "t2.large", "m1.small", "m1.medium", "m1.large", "m1.xlarge", "m2.xlarge", "m2.2xlarge", "m2.4xlarge", "m3.medium", "m3.large", "m3.xlarge", "m3.2xlarge", "m4.large", "m4.xlarge", "m4.2xlarge", "m4.4xlarge", "m4.10xlarge", "c1.medium", "c1.xlarge", "c3.large", "c3.xlarge", "c3.2xlarge", "c3.4xlarge", "c3.8xlarge", "c4.large", "c4.xlarge", "c4.2xlarge", "c4.4xlarge", "c4.8xlarge", "g2.2xlarge", "g2.8xlarge", "r3.large", "r3.xlarge", "r3.2xlarge", "r3.4xlarge", "r3.8xlarge", "i2.xlarge", "i2.2xlarge", "i2.4xlarge", "i2.8xlarge", "d2.xlarge", "d2.2xlarge", "d2.4xlarge", "d2.8xlarge", "hi1.4xlarge", "hs1.8xlarge", "cr1.8xlarge", "cc2.8xlarge", "cg1.4xlarge"]
                    ,
                "ConstraintDescription" : "must be a valid EC2 instance type."
            },

            "KeyName": {
                "Description" : "Name of an existing EC2 KeyPair to enable SSH access to the instance",
                "Type": "AWS::EC2::KeyPair::KeyName",
                "ConstraintDescription" : "must be the name of an existing EC2 KeyPair."
            },

            "SSHLocation" : {
                "Description" : " The IP address range that can be used to SSH to the EC2 instances",
                "Type": "String",
                "MinLength": "9",
                "MaxLength": "18",
                "Default": "0.0.0.0/0",
                "AllowedPattern": "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})",
                "ConstraintDescription": "must be a valid IP CIDR range of the form x.x.x.x/x."
            },

            "ImageId" : {
                "Description" : "Name of an Amazon Machine Image for the application server",
                "Type" : "String",
                "Default" : "ami-e2021d81"
            }
        },

        "Resources" : {

            "VPC" : {
                "Type" : "AWS::EC2::VPC",
                "Properties" : {
                    "CidrBlock" : "10.0.0.0/16",
                    "Tags" : [ {"Key" : "Application", "Value" : { "Ref" : "AWS::StackId"} } ]
                }
            },

            "Subnet" : {
                "Type" : "AWS::EC2::Subnet",
                "Properties" : {
                    "VpcId" : { "Ref" : "VPC" },
                    "CidrBlock" : "10.0.0.0/24",
                    "Tags" : [ {"Key" : "Application", "Value" : { "Ref" : "AWS::StackId"} } ]
                }
            },

            "InternetGateway" : {
                "Type" : "AWS::EC2::InternetGateway",
                "Properties" : {
                    "Tags" : [ {"Key" : "Application", "Value" : { "Ref" : "AWS::StackId"} } ]
                }
            },

            "AttachGateway" : {
                "Type" : "AWS::EC2::VPCGatewayAttachment",
                "Properties" : {
                    "VpcId" : { "Ref" : "VPC" },
                    "InternetGatewayId" : { "Ref" : "InternetGateway" }
                }
            },

            "RouteTable" : {
                "Type" : "AWS::EC2::RouteTable",
                "Properties" : {
                    "VpcId" : {"Ref" : "VPC"},
                    "Tags" : [ {"Key" : "Application", "Value" : { "Ref" : "AWS::StackId"} } ]
                }
            },

            "Route" : {
                "Type" : "AWS::EC2::Route",
                "DependsOn" : "AttachGateway",
                "Properties" : {
                    "RouteTableId" : { "Ref" : "RouteTable" },
                    "DestinationCidrBlock" : "0.0.0.0/0",
                    "GatewayId" : { "Ref" : "InternetGateway" }
                }
            },

            "SubnetRouteTableAssociation" : {
                "Type" : "AWS::EC2::SubnetRouteTableAssociation",
                "Properties" : {
                    "SubnetId" : { "Ref" : "Subnet" },
                    "RouteTableId" : { "Ref" : "RouteTable" }
                }
            },

            "NetworkAcl" : {
                "Type" : "AWS::EC2::NetworkAcl",
                "Properties" : {
                    "VpcId" : {"Ref" : "VPC"},
                    "Tags" : [ {"Key" : "Application", "Value" : { "Ref" : "AWS::StackId"} } ]
                }
            },

            "InboundHTTPNetworkAclEntry" : {
                "Type" : "AWS::EC2::NetworkAclEntry",
                "Properties" : {
                    "NetworkAclId" : {"Ref" : "NetworkAcl"},
                    "RuleNumber" : "100",
                    "Protocol" : "6",
                    "RuleAction" : "allow",
                    "Egress" : "false",
                    "CidrBlock" : "0.0.0.0/0",
                    "PortRange" : {"From" : "80", "To" : "80"}
                }
            },

            "InboundSSHNetworkAclEntry" : {
                "Type" : "AWS::EC2::NetworkAclEntry",
                "Properties" : {
                    "NetworkAclId" : {"Ref" : "NetworkAcl"},
                    "RuleNumber" : "101",
                    "Protocol" : "6",
                    "RuleAction" : "allow",
                    "Egress" : "false",
                    "CidrBlock" : "0.0.0.0/0",
                    "PortRange" : {"From" : "22", "To" : "22"}
                }
            },

            "InboundResponsePortsNetworkAclEntry" : {
                "Type" : "AWS::EC2::NetworkAclEntry",
                "Properties" : {
                    "NetworkAclId" : {"Ref" : "NetworkAcl"},
                    "RuleNumber" : "102",
                    "Protocol" : "6",
                    "RuleAction" : "allow",
                    "Egress" : "false",
                    "CidrBlock" : "0.0.0.0/0",
                    "PortRange" : {"From" : "1024", "To" : "65535"}
                }
            },

            "OutBoundHTTPNetworkAclEntry" : {
                "Type" : "AWS::EC2::NetworkAclEntry",
                "Properties" : {
                    "NetworkAclId" : {"Ref" : "NetworkAcl"},
                    "RuleNumber" : "100",
                    "Protocol" : "6",
                    "RuleAction" : "allow",
                    "Egress" : "true",
                    "CidrBlock" : "0.0.0.0/0",
                    "PortRange" : {"From" : "80", "To" : "80"}
                }
            },

            "OutBoundHTTPSNetworkAclEntry" : {
                "Type" : "AWS::EC2::NetworkAclEntry",
                "Properties" : {
                    "NetworkAclId" : {"Ref" : "NetworkAcl"},
                    "RuleNumber" : "101",
                    "Protocol" : "6",
                    "RuleAction" : "allow",
                    "Egress" : "true",
                    "CidrBlock" : "0.0.0.0/0",
                    "PortRange" : {"From" : "443", "To" : "443"}
                }
            },

            "OutBoundResponsePortsNetworkAclEntry" : {
                "Type" : "AWS::EC2::NetworkAclEntry",
                "Properties" : {
                    "NetworkAclId" : {"Ref" : "NetworkAcl"},
                    "RuleNumber" : "102",
                    "Protocol" : "6",
                    "RuleAction" : "allow",
                    "Egress" : "true",
                    "CidrBlock" : "0.0.0.0/0",
                    "PortRange" : {"From" : "1024", "To" : "65535"}
                }
            },

            "SubnetNetworkAclAssociation" : {
                "Type" : "AWS::EC2::SubnetNetworkAclAssociation",
                "Properties" : {
                    "SubnetId" : { "Ref" : "Subnet" },
                    "NetworkAclId" : { "Ref" : "NetworkAcl" }
                }
            },

            "IPAddress" : {
                "Type" : "AWS::EC2::EIP",
                "DependsOn" : "AttachGateway",
                "Properties" : {
                    "Domain" : "vpc",
                    "InstanceId" : { "Ref" : "WebServerInstance" }
                }
            },

            "InstanceSecurityGroup" : {
                "Type" : "AWS::EC2::SecurityGroup",
                "Properties" : {
                    "VpcId" : { "Ref" : "VPC" },
                    "GroupDescription" : "Enable SSH access via port 22",
                    "SecurityGroupIngress" : [
                    {"IpProtocol" : "tcp", "FromPort" : "22", "ToPort" : "22", "CidrIp" : { "Ref" : "SSHLocation"}},
                    { "IpProtocol" : "tcp", "FromPort" : "80", "ToPort" : "80", "CidrIp" : "0.0.0.0/0"}
                    ]
                }
            },


            "WebServerInstance" : {
                "Type" : "AWS::EC2::Instance",
                "DependsOn" : "AttachGateway",
                "Type": "AWS::EC2::Instance",
                "Metadata" : {
                    "AWS::CloudFormation::Init" : {
                        "config" : {
                            "files" : {
                                "/etc/systemd/system/tomcat.service": {
                                    "content" : { "Fn::Join" : ["", [
                                        "[Unit]\n",
                                        "Description=Apache Tomcat Web Application Container\n",
                                        "After=network.target\n",

                                        "[Service]\n",
                                        "Type=forking\n",

                                        "Environment=JAVA_HOME=/usr/lib/jvm/java-8-oracle\n",
                                        "Environment=CATALINA_PID=/opt/tomcat/temp/tomcat.pid\n",
                                        "Environment=CATALINA_HOME=/opt/tomcat\n",
                                        "Environment=CATALINA_BASE=/opt/tomcat\n",
                                        "Environment='CATALINA_OPTS=-Xms512M -Xmx1024M -server -XX:+UseParallelGC'\n",
                                        "Environment='JAVA_OPTS=-Djava.awt.headless=true -Djava.security.egd=file:/dev/./urandom -Djava.net.preferIPv4Stack=true'\n",

                                        "ExecStart=/usr/bin/authbind --deep /bin/bash -c /opt/tomcat/bin/startup.sh\n",
                                        "ExecStop=/opt/tomcat/bin/shutdown.sh\n",

                                        "User=tomcat\n",
                                        "Group=tomcat\n",
                                        "UMask=0007\n",
                                        "RestartSec=10\n",
                                        "Restart=always\n",

                                        "[Install]\n",
                                        "WantedBy=multi-user.target\n"
                                    ]]},
                                    "mode"  : "000644",
                                    "owner" : "root",
                                    "group" : "root"
                                }
                            }
                        }
                    }
                },
                "Properties" : {
                    "ImageId" : { "Ref" : "ImageId" },
                    "InstanceType" : { "Ref" : "InstanceType" },
                    "KeyName" : { "Ref" : "KeyName" },
                    "Tags" : [ {"Key" : "Application", "Value" : { "Ref" : "AWS::StackId"} } ],
                    "NetworkInterfaces" : [{
                        "GroupSet"                 : [{ "Ref" : "InstanceSecurityGroup" }],
                        "AssociatePublicIpAddress" : "true",
                        "DeviceIndex"              : "0",
                        "DeleteOnTermination"      : "true",
                        "SubnetId"                 : { "Ref" : "Subnet" }
                    }],
                    "UserData"       : { "Fn::Base64" : { "Fn::Join" : ["", [
                        "#!/bin/bash -xe\n",
                        "apt-get update\n",

                        "# Install cloud init\n",
                        "apt-get -y install python-setuptools\n",
                        "mkdir aws-cfn-bootstrap-latest\n",
                        "curl https://s3.amazonaws.com/cloudformation-examples/aws-cfn-bootstrap-latest.tar.gz | tar xz -C aws-cfn-bootstrap-latest --strip-components 1\n",
                        "easy_install aws-cfn-bootstrap-latest\n",

                        "cfn-init -v ",
                        "         --stack ", { "Ref" : "AWS::StackName" },
                        "         --resource WebServerInstance ",
                        "         --region ", { "Ref" : "AWS::Region" }, "\n",

                        "# Install JDK\n",
                        "apt-get install -y python-software-properties debconf-utils\n",
                        "add-apt-repository -y ppa:webupd8team/java\n",
                        "apt-get update\n",
                        "echo \"oracle-java8-installer shared/accepted-oracle-license-v1-1 select true\" | debconf-set-selections\n",
                        "apt-get install -y oracle-java8-installer\n",

                        "# Install tomcat\n",
                        "groupadd tomcat\n",
                        "useradd -s /bin/false -g tomcat -d /opt/tomcat tomcat\n",
                        "curl -O http://apache.mirror.serversaustralia.com.au/tomcat/tomcat-8/v8.5.16/bin/apache-tomcat-8.5.16.tar.gz\n",
                        "mkdir /opt/tomcat\n",
                        "tar xzvf apache-tomcat-8*tar.gz -C /opt/tomcat --strip-components=1\n",
                        "chgrp -R tomcat /opt/tomcat\n",
                        "chmod -R g+r /opt/tomcat/conf\n",
                        "chmod g+x /opt/tomcat/conf\n",
                        "chown -R tomcat /opt/tomcat/webapps/ /opt/tomcat/work/ /opt/tomcat/temp/ /opt/tomcat/logs/\n",

                        "# Configure Tomcat for port 80 using authbind\n",
                        "apt-get install authbind -y\n",
                        "touch /etc/authbind/byport/{443,80}\n",
                        "chmod 500 /etc/authbind/byport/{443,80}\n",
                        "chown tomcat:tomcat /etc/authbind/byport/{443,80}\n",
                        "sudo sed -i 's/8080/80/g' /opt/tomcat/conf/server.xml\n",

                        "systemctl daemon-reload\n",
                        "systemctl enable tomcat\n",
                        "systemctl start tomcat\n",

                        "cfn-signal -e $? ",
                        "         --stack ", { "Ref" : "AWS::StackName" },
                        "         --resource WebServerInstance ",
                        "         --region ", { "Ref" : "AWS::Region" }, "\n"
                    ]]}}
                },
                "CreationPolicy" : {
                    "ResourceSignal" : {
                        "Timeout" : "PT15M"
                    }
                }
            },

            "StaticAssertBucket": {
                "Type" : "AWS::S3::Bucket",
                "Properties" : {
                    "AccessControl" : "PublicRead",
                    "BucketName" : "orchestrated.devopschallenge.assets",
                    "CorsConfiguration" : {
                        "CorsRules" : [
                            {
                                "AllowedHeaders" : [
                                    "*"
                                ],
                                "AllowedMethods" : [
                                    "GET",
                                    "POST"
                                ],
                                "AllowedOrigins" : [
                                    "*"
                                ],
                                "MaxAge" : "3000"
                            }
                        ]
                    },
                    "WebsiteConfiguration" : {
                        "ErrorDocument" : "index.html",
                        "IndexDocument" : "index.html"
                    }
                }
            }
        },

        "Outputs" : {
            "URL" : {
                "Value" : { "Fn::Join" : [ "", ["http://", { "Fn::GetAtt" : ["WebServerInstance", "PublicIp"] }]]},
                "Description" : "Newly created application URL"
            }
        }
}
